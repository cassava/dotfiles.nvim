# Playbook for installing my neovim dependencies.
#
# Usage: ansible-playbook -i "localhost," -c local -K playbook.yml [--skip-tags extra]
#
---

- hosts: all
  vars:
    rust_user: "{{ ansible_user_id }}"
    go_path: "{{ ansible_env.GOPATH | default(ansible_user_dir + '/go') }}"
    gtm_version: "1.3.2"

  environment:
    GOPATH: "{{ go_path }}"

  tasks:
    - name: On Arch Linux
      when: ansible_os_family == 'Arch Linux'
      become: true
      block:
        - name: Upgrade Neovim with providers
          pacman:
            name:
              - neovim
              - python-neovim
              - python2-neovim
            state: latest
            update_cache: true

        - name: Install extra dependencies
          pacman:
            name:
              - cmake
              - clang
              - clang-tools-extra
              - ctags
              - git
              - go
              - python
              - python2
            state: present
          tags: ['extra']

    - name: On Debian/Ubuntu
      when: ansible_os_family == 'Debian'
      become: true
      block:
        - name: Add Neovim PPA
          apt_repository:
            repo: ppa:neovim-ppa/stable
            state: present

        - name: Upgrade Neovim
          apt:
            name: neovim
            state: latest
            update_cache: true

        - name: Install pip
          apt:
            name:
              - python-pip
              - python3-pip
            state: present

        - name: Upgrade Neovim Python providers
          pip:
            executable: "{{ item }}"
            name: neovim
            state: latest
          with_items:
            - pip
            - pip3

        - name: Install extra dependencies
          apt:
            name:
              - cmake
              - clang
              - clang-format
              - exuberant-ctags
              - git
              - golang
              - python
              - python3
            state: present
          tags: ['extra']

    - name: Install git-time-metric
      shell: "wget -q https://github.com/git-time-metric/gtm/releases/download/v{{ gtm_version }}/gtm.v{{ gtm_version }}.linux.tar.gz -O - | tar xz"
      args:
        chdir: /usr/local/bin
        creates: /usr/local/bin/gtm
        warn: no
      become: yes
      tags: ['extra']

    - name: rust | Get rustup binary path
      set_fact:
        cargo_bin_dir: "{{ ansible_user_dir }}/.cargo/bin"
        rustup_binary: "{{ ansible_user_dir }}/.cargo/bin/rustup"
        cargo_binary: "{{ ansible_user_dir }}/.cargo/bin/cargo"

    - name: rust | Install rustup
      shell: curl https://sh.rustup.rs -sSf | sh -s -- -y
      args:
        creates: "{{ rustup_binary }}"
        warn: false
      tags: ['extra']

    - name: rust | Install components
      command: "{{ rustup_binary }} component add rustfmt-preview rls-preview rust-src rust-analysis"
      tags: ['extra']

    - name: rust | Install racer
      command: "{{ cargo_binary }} install --force racer"
      args:
        creates: "{{ cargo_bin_dir }}/racer"
      tags: ['extra']

    - name: rust | Install ripgrep
      command: "{{ cargo_binary }} install --force ripgrep"
      args:
        creates: "{{ cargo_bin_dir }}/rg"
      tags: ['extra']
